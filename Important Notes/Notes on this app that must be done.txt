2023/05 Course Started

WE WANT TO SAVE OUR PROGRESS TO VERSION CONTROL OR SOURCE CONTROL:
-Install Github and git bash
-Make sure you have a github account
-Go to profile->Settings->Developer Settings->Personal access token->Tokens Classic->Generate new token->Generate new token (classic)->Give it a note or name->No expiration->Check all the boxes->Generate Token->Copy the token and save it somewhere and use the token for your password, because of pushing and comitting code to my github repo
-This is mey generated token: Use the following token/password when comitting things to my personal github: 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
-Go to the project and open up git bash or any terminal or my choice:
-Type git status -> It will say "not a git repo"
-Go to github and create a new repository
-Follow all the steps to commit and push on github
-Create a .gitignore file-> Watch a vido on youtube how to create on visual studio
-Go back to see the changes, you'll see that the changes are less now
-We also dont want the appsettings.json file to be included in the commits so right click and add to .gitignore file

SECTION 3 - BUILDING A WALKING SKELETON PART TWO - ANGULAR
(THIS IS OLD WILL BE REMOVED NOV 2023. USE THE FOLLOWING INSTRUCTIONS ON THIS NOTEPAD)MAKE THE FRONTEND RUN ON HTTPS INSTEAD OF JUST SO IT AN BE THE SAME AS THE BACKEND RUNNING ON HTTPS
-Go to the studentassets folder->generateTrustedSSL
-Click on server and do all the steps.
-Create a ssl folder in the client app
-Copy the server and server.ky files and paste it in the ssl folder from the generateTrustedSSL folder
-Go to angular.json file and under serve add the following object-> "options":{
            "sslCert": "./ssl/server.crt",
            "sslKey": "./ssl/server.key",
            "ssl": true
          },
-Restart the application and rerun ng serve -o
-Go to the lock next to the url and check the certicate

(RATHER USE THIS. WE WANT TO RUN OUR ANGULAR APPLICATION OVER HTTPS AND NOT HTTP FOR DEVELOPMENT AS WELL AND THAT IS HOW THE APPLICATION IS GONNA BE PUBLISHED)
- We need a certificate for our client side application by generating a certificate and we cannot use a dotnet self signed certificate for this.
-We need to install "mkcert" to our computer. Search the name and go to the github link on google: https://github.com/FiloSottile/mkcert
-Read the readme file and look at the installation process
-Create a directory inside the client folder for ssl and call it "ssl_new" since we already have that old ssl folder for the previous certificate that will no longer work after november 2023.
-And we need to run the command, first of all, to install a root local certificate authority into our computer
-Download and install chocolatey in adminstrator cmd and follow the instruction to install it on your local machine using admin powershell: https://chocolatey.org/install
-run choco --version
-Once its installed on the computer
-Now install mkcert on windows powershel admin: "choco install mkcert"
-run mkcert --version
-Create a directory in the client folder of the frontend and call it "ssl"
-In vs code navigate to the ssl folder and run the following command: mkcert --install
-Now it must be installed
-Run the following command: "mkcert localhost". It will then give you details on when it will expire
-We can run "mkcert localhost" anytime to get a new certificate
-Now go to angular.json file and tell to run over ssl:
-Go to angular.json file and under serve add the following object-> "options": {
            "sslCert": "./ssl/localhost.pem",
            "sslKey": "./ssl/localhost-key.pem",
            "ssl": true
          },




WHEN CREATING SERVICES IN THE API IT'S IMPORTANT TO CREATE INTERFACES AND IMPLEMENTATION/SERVICE CLASS AT THE SAME TIME AND DEFINE THEM ASS BUILDER.SERVICE.ADDSCOPE(...) in the program.cs class - Section 4 video 41.

SECTION 6 ROUTING IN ANGULAR:::::::
TO ENSURE THAT ONLY AUTHORISED USERS CAN ACCESS A SPECIFIC ENDPOINT:
-Do it on top of the http request in a controllers method eg. [Authorize] and you can also add [AllowAnonymous], but not at the beginning of the controller

IF WE WANT SOME OF THE LINKS TO BE PROTECTED THAT A NON LOGGED INUSER SHOULDNT ACCESS:
-We should consider using AuthGuard.ts which is an extra file that should be created to see if theres already a user that exists in that observable we created.
-Go to app-routing.module.ts file and add the canActivate property to one of the paths in your Routes array.
-Angular or the client side can never give us security its only the api that can code security. The Client only hides stuff for us

FOR ANY THIRD PARTIES IMPORTS IN ANGULAR APPLICATION
-Use an extra module besides app.module.ts that is shared.module.ts
-If we want the imports to work in the shared.module.ts we also need to export them, creating an export array the same as the imports array

SECTION 7 ERROR HANDLING:::::::
WHEN ADDING ERROR HANDLING IN YOUR APPLICATION, IT IS A MUST
=BACKEND
-Start with a BuggyController - Create all methods for different errors. Test them on postman or swagger if they do have the methods in the controller
-With this controller we will get way too much information when an error occur, eg. lines of errors, but we are interested only in something short
-When we're in development mode in the launchSettings.json file and this means we will see a lot of errors, but with production mode you wont be able to see much errors
-To go back to the second step we are done with all the methods in the controller, but if we see an exception that might occur in our code we want to add a try catch block. Now adding a try and catch block to each method in the buggyController. Its better to handle exceptions at the highest level instead of writing try catch for each method in the BuggyController. So we're not taking that approach(try cartch), we leave the methods as is!
-Now create our own middleware to handle exceptions in our application
-Create new folder errors in the api folder
-Create new class ApiException.cs inside the errors folder: This is gonna contain the response of what we are gonna be sending back to the client when we have an exception. Check the file for details.
-Inside the api create a new folder called Middleware.
-Another c# class called ExceptionMiddleware.cs inside the Middleware folder to handle exceptions in out application. Read the details of how things are done in the file
-Now since we're done in ExceptionMiddleware.cs class and in order to use this middleware now we need to go back to our program.cs class
-Exception handling has to go to the very top of the HTTP request pipeline in this program.cs file
-Done. Run the application and test in swagger or postman
=CLIENT
-We gonna do something similar in the angular side, we gonna create a component that we going to use to test our different error responses we getting back from the server. Just to manage and handle errors on the client side
-Create component errors/test-error and follow the details
-Add that error component top the app-routing.module.ts file 
-Add then to the nav so that it can be accessed
-Create an interceptor called interceptors/error and follow the details in the file for the errors that we can get in the application in the client.
-Add the interceptor in the providers array in app.module.ts
- So we want to make use of validation errors in the client, but on the test 400 Validation Error button we get an error that contains 2 arrays and we need to make it one array with a few indexes.
-So when it comes to validation errors, users are typically gonna fill out a form and we want to display on that form somewhere what they have done wrong when they completed a field incorrectly.
-Go to the test-error component and test if I can run ngFor over that array of the errors and create a new array to have those errors
-Create 2 new components in the errors folder that will navigate to another component when reaching error 404(not-found) and error 500(server-error)
-Add the Handling Not found
-Adding the server-error page

IF WE SEE SOMETHING IN OUR CODE THAT CAN POTENTIALLY THROW AN EXCEPTION THEN USE A TRY CATCH!

Section 8: Extending the API
-Generating seed data: In order to populate the Database with data instead of making it time consuming use the "json generator" in the browser
-Create a # class in the Data folder and call it Seed and follow the code in there.
-In order to apply the seed data: Up till now we have been using the Package Manager console and ran migrations and update the database, but we can also do that in code and not only package manager console
-A good place to do this i when the application starts up and this is in the Program.cs class which is the entry point of the applicataion
-Start Coding the program.cs class and follow thhe seeding data part one video. The implementation for the migration on Seeding data must go after the MapControllers() and before the Run()

CREATING A REPOSITORY PATTERN AND MOVING AWAY FROM DBCONTEXT
-DbContext supports the following methods:
	-Users.First()
	-Users.FirstOrDefault()
	-Users.SingleOrDefault()
	-Users.Include(x=>x.Thing).FirstOrDefault
	-+10000 other methods
-Repository supports the following methods:
	-GetUser()
	-GetUsers()
	-UpdateUser()
	-SaveAll()
-DataContext in the controller will make it more difficult to test the controllers, because we need an implementation of the DataContext class in order to test the controllers
-The DataContext class is Big and Complex and we want to avoid having to have an implementation of the DataContext.
-In order to implement the Repository pattern we need to have an Interface and an implementation for our new Repository
-Creating interfaces will be in the Interface folder
-Creating the Implementation class will be in the Data Folder
-Now that Im done with the Interface and implementation class, I need to add this to the ApplicationServiceExtension class and add it as another service under the other services as AddScoped inside the static class.
-Now Change the Users Controller accordingly to get rid of the DataContext implementation and implement the Interface and Implementation class
-We are actually returning an AppUser and Poto, but we dont want to return all the properties, we just want to return a few properties from AppUser and Photo.
-Theres a relationship between the AppUser and the Photo. One(AppUser) To Many(Photo) relationship. Since we dont want the entire AppUser model and Photo Model to be returned, we need to shape our data and in order to do this we need to consider Dto's.
-So we will create 2 Dto's. One for the AppUser Model and one for the Photos Model
-Creating a MemberDto and PhotoDto based on exactly what we want to return.
-So now we need a way to tell our Api instead of returning from our UsersController what we get from the Repository, we need to map the properties from our AppUser into our MemberDto and for Photo into our PhotoDto.
-Creating this code can be extremely tedious and we gonna take a look at a tool that can help us do that called AutoMapper
-So we gonna use the AutoMapper tool to help us map from an Entity to a Dto and later on vice versa
-Go to Nuget Package Manager and search for "AutoMapper" and install "AutoMapper.Extensions.Microsoft.DependencyInjection"
-We gonna use that to inject AutoMapper into our controllers or Repositories as in when we need it.
-After AutoMapper has been installed, Create a new folder called "Helpers"
-Create a new c# class inside that folder an call it "AutoMapperProfiles" and that class derives from "Profile". Now follow the code.
-Make sure to add the AutoMapperProfiles class to the ApplicationServiceExtension Class as another service
-Once we're done with the AutoMapperProfiles Class we need to Inject this as another service into our controller as IMapper from AutoMapper. Do the necessary coding. 
-We will also want to add another photoUrl to the MemberDto, but cant really Map to it, so what we need to do is configure the AutoMapper sectin 8: 96. Look at the notes on the code

SECTION 9:
-Creating an interface in the frontend must be exactly the same as in the result we're getting in the backend in Postman or Swagger
-Never have hardcoded urls in the services files.
-Go to the environments folder and this is where we put in environment variables.
-If we run ur application in production mode, we gonna use environment.prod.ts file and if we're not then we in environment.ts file(Its for Development). Put in the ApiUrl in this file
-113.Adding a photo Gallery (Angular 16+). So the one we will be using is called "Ng-gallery". Go to getting started and copy the npm command and install in angulart project

SECTION 10:
-Adding a Can Deactivate route guard to ask the user do they really want to go to another page if they have unsaved changes. In order to do that we need to consider 
prevent-unsaved-changes.guard.ts file in the Guards folder and specify th component there. And add the Deactive to the path in the routing module next to the component we using to make changes to on the form
-Say for instance we are on the system and then immediatly use the link and type something in like youtube or google and then if we go back we would see we're back in the project where we left off. We dont want that because the user is not notified that the changes will be lost. In order to prevent this we need to get access to the browserEvent and in order to accomplish this we need to consider host listener. The host is the browser in this case and the listener is the events happening on the host which is the browser in this case. Add the hostlistener to the component we are making changes to in the form and add the browser event which is "window:beforeunload"
-Adding loading indicators to the application so that the user can see something they have done is in process. We are using ngx spinner for the loading indicators. The sitewe getting the spinner from: https://github.com/Napster2210/ngx-spinner. When adding the spinner, please use the command: "npm install ngx-spinner --save", by making use of npm.
-Follow the document with regards to the implementation of the spinner. We will also have to create a service that enables the spinner if a http request is going on and stops it when a http request is finished. Created a busy.service.ts file.
- We then also need to create an interceptor file for the loadingin indicator service. And follow the steps inside and make sure to add it to the providers array in the app.module.ts file
-The ngx-spinner component is gonna be visible from anywhere in our application and then open app component since this is our root component. Add the ngx-spinner component to the app component html fiile.
-"Using the Service to store state" / Members List. We've got a small issue when we go into a page it will load since we requesting a service, but if we go to another page and go back to the page we requested an http for, it loads again which meeans its wrong since the application must remember that weve already made a request to that service. We need to access it without the loading indicator again. And also since we get all the matches which means all the members data we dont want the loading indicator to happen when going into a members detail since we already have the data when the member card shows in the matches tab. A note to remeber once the coponent id destroyed the services are not, eg. Once the membersList component is destroyed then goodbye members and then we need to call the services again or reload the members again. So instead of storing our members in the memberslist component only, we must also store our members in the members service for the loading indicator not to load the entire time when we move away from the memberslist component and come back again. The services files does not get destroyed when the users move to different parts of the application and that means we need to add coding to our members service file in the getMembers() method. Please see coding doen in the membersServices file.
-"Using the Service to store state" / Member only. Do exactly the same for getMember() so that when we go into the member details we dont have to load again and again.
-"Using the Service to store state" / Update Member. Do exactly the same for updateMember()
-So nothing will reload anymore because we have our members in memory base on all memebers, get member and update member

SECTION 11: ADDING PHOTO UPLOAD FUNCTIONALITY
//INTRODUCTION
-Where do we store our photos, there are choices?
	-Database as Binary Large Objects (Not efficient)
	-File System on our server (Its fine)
	-Cloud Service
-The option we gonna be using for photo storage is a service called "Cloudinary".
-Cloudinary provides a free tier, no credit card required and we get 10Gb storage for free and they provide a way for us to transform the "images uploaded" on that backend server that we dont need to take care of ourselves
-Steps involved:
-A client is gonna drag and drop an image in the angular application and only authenticated users can upload photos on the server
-Step 1: Client uploads photo to API and using their JWT token to authenticate the server
-Step 2: Securely upload the photo to cloudinary
-Step 3: Cloudinary stores the photo and sends the response
-Step 4: API saves photo URL and Public ID to DB
-Step 5: Saved in DB and given auto generated ID
-Step 6: 201 Response sent to client with location header
-Now that the understanding is clear go to cloudinary.com and sign up for free.
-Start with the Backend go to nuget package panager and search and install "CloudinaryDotNet"
-Since that is done we need our configuratoin settings which is in the cloudinary.com dashboard page that refers to the "cloud name" and the "Api Key" and the "Api Secret" and we going to store that information inside our configuration so that we can pass it to the methods
that we gonna use to upload the images
-We do not want to store this information on github. So add appsettings.json file to gitIgnore.
-Go to appsettings.json file and add the configuration there for "CloudinarySettings"
-Add a new c# helper class, called "CloudinarySettings"
-Then add this helper class to the ApplicationServiceExtensions class.
-Create a PhotoInterface and photoService and make sure to understand the code written in those 2 files
-Since we created an interface and a service we need to add this to our applicationServiceExtensions
-Create a new method in the usersController so we can upload the photos and follow the code.
-Also make sure to debug the code and login first before debugging the method
-Create the photo-editor component and make it a child of the member-edit component
-Once that is done then add a photo uploader in the photo-editor component. We ghonna be using a 3rd party package to help us to do this. And the one that is gonna be used is called the "Ng2 File Upload" - Valor Software. Follow all the steps on this link: https://valor-software.com/ng2-file-upload/
-Remember to add FileUploaderModule to SharredModule in the project
- Start coding in the photo-editor.component.ts and html file
-133.Setting the main photo in the API and this means we gonna create another httpPut endpoint in the usersController
-Test in postman now with lisa
-134. Adding the main photo image to the navbar for the logged in user which is goonna be the user's main photo. Making changges in the account Controller and also add the photoUrl to the userdto
-135. Setting the main photo in the client. Do this in the photoEditorComponent.ts and follow the code
-136. Deleting the photo in the usersController and follow the code
-137. Deleting the photo in the client and follow the code

SECTION 12: REACTIVE FORMS
-143. Validation Feedback: In the template [class.is-invalid] only show us whether the input is invalid or not
147. Adding a date picker, we need to make use of ngx bootstrap.
149. Client side registration: Once the user has successfully registered we gonna consider them logged in, so we'll take the opportunity to redirect them to the members page after they have successfully registered. In order to do that we need to inject Router into our register.component.ts file. We also need to consider changing the datepicker result as cleaner result of just day month ands year and not time included. Follow the code in the register.component.ts file

SECTION 13: PAGING, SORTING AND FILTERING
- We gonna implement paging, sorting and filtering in both the api and the client side
- 152. Adding a paged list class.In the UserRepository for the GetMebersAsync we would have to add .Take(4): This is the 1st step starting with Pagination, which means we're only taking 4 records from this method. Then after that we would have to use .Skip(4): 2nd step, if we were on the second page we would want to skip the first 4 members and that would effectively give us the next batch of 4 users. We dont want to do it like this in the respository, because then we have to do it for each and every method that needs pagination and we want something more reusable. In order to do this reusable:
-153.Adding helper classes for pagination. We gonna create a new class or derive from this new class called "PagedList" inside our Helpers folder in the Api. Follow the code in this class
-Once done. Then we gonna create another helper class called  PaginationHeader and its gonna be an object that we return inside the httpResponse Headers. So we gona have a header called Pagination and return this inside an http response.
-And to make this easier to work with inside the http response, we will create an extension method thats gonna extend the http response object or class. Now inside the Extensions folder create another extensions class called "HttpExtensions" and follow the code in there.
-Once done. In order for this pagination to work we need to take parameters from our client so it can ask us what page number their interested in and what page size it is. Create a new Helper class inside the Helpers folder and call it "UserParams" and follow the code.
-154. Using the pagination classes. Once done, we gonna look on how to use all these pagination classes that we created. Make sure to bring in changes to the Interface and UserRepository for the GetMembersAsync Method as well as in the UsersController.
-Test in Postman. Remember to log in first and then test the query without QS and then also test the pagination
-Backend setup for Pagination: PagedList -> PaginationHeader -> HttpExtension -> UseParams -> IUserRepository -> UserRepository -> UsersController
-155.Setting up client pagination. Create a new model called pagination.ts and follow the code
-Head over to the membersService where we gonna use this. And we gonna focus on our getMembers method and follow the code 
-In the get request inside the getMembers method we need to get access to the full http response, because that is where our pagination header is residing. In order to do this we must tell it what we want to observe. We want to observer the response and not just the body and we also want to pass up the params in there as well eg. {observe: 'response', params}
-Make the neccessary changes in the member-list.component.ts file and in the member-list.component.html file.
-Run Project and check the networks tab and look at the wquery string and take a look at the response headers
-156.Using the angular bootstrap pagination component. Add the code to members-list component as well as the shared module
-157.Adding filtering to the API. Issues we have we return the currently logged in user too in the members list. We want to exclude the logged in user.
-We also going to return by default the opposite gender of the current logged in user.
-We need to make changes to the useParams class to add the gender as well as the currenUserName.
-Make changes to the GetUsers method in the UsersController and GetMembersAsync method in UserRepository. Go test it in Postman its supposed to work now
-158.Adding additional filters. Allow the user to select an age range. Make changes to the UserParams file.
-Make changes to the GetUsers method in the UsersController and GetMembersAsync method in UserRepository.
-Check Postman on age Ranges. Filter is working on Age ranges.
-Now we got our filters working in the Api. Lets head over to frontend
159. Cleaning up the member service. We want to add the Gender property to the userDto and in the accountsController. This is all because of the filtering we have for gender
-Also add the gender property to the frontend User.ts file.
-We need to go to the memberService and send more parameters to the API
-Create a UserParams.ts file in the frontend so that we can have all the properties in there instead of having all these properties as parameters in the getMembers() method and make it an object instead and follow the code implementation
-160.Adding filter buttons to the client. Filter based on the age and the gender. Do this inside the member-list.component.ts as well as in the html file file. We need to create a dropdown for the gender and normal inputs for the age range. Have this as a template form
-161.Adding sorting functionality. Allow the user to sort the users when last they were active or how long they have been a member. We'll start off in the api to implement this, inside the User Reposiitory in the GetMembersAsync() method
-162.Adding an action filter. Action filter means we can do something with the request even before its executed by our endpoint or after. We want to update the lastActive property when loading all the members to see when the user last used the site.
-Create a new class in the Helpers folder and call it LogUserActivity and follow all the code.
-Once done. Test it on postman, log in as lisa and then get the username by lisa and check the lastActive property that is has been updated today
-163. Making the last active action filter more optimal. Impplementing getting the user by Id instead of username. and add the id to the claimsprincipal too and so forth and make the necessary changes in repo and controller
-164. Sorting on the client. We want to sort the members based on their recent activity or whether their a new member and in order to do this we going to get help from ngx bootstrap. We want radio buttons to choose latest active members or new recent members.Import the buttonsModule from angular bootstrap to the sharedModule and remeber to export it too.
-In the userParams add the orderBy property and give it a default value of lastActive that we gonna order by.
-Then go to the member-list.html file and add the 2 buttons that we want to order by, we will make use of 2 radio buttons, because we are ordering by lastActive or created.
-Go to the members service file and add it to the params in the getMembers method
-Once done, test on the website
-165.Formatting dates.
-So when going into the user's detail we have the following look: 
Last Active:
2023-06-25T11:11:52.5217973
Member since:
2020-06-24T00:00:00
and we dont want these dates to look like this. we just have to add the pipe "date in the detail html file of the member.
-We can also customize it for the created date like so: | date: "dd MMM yyyy".
-For last Active we will use a package that will help us specify how long ago the member was active instead of specifying the date, so we want seconds, minutes, hours and days,weeks,months and years.
-The package we will be using is called ngx-timeago.
-For third party packages we need to install it using npm.
-Then add it to sharedModule.
-When we test on the website we will see that the last actiev hours is actually out, and we need to correct this because the browser using localtime and our server is returning the UTC date. Go to the networks tab and look at the 200 ok request and look at the lastActive property. We will see its still not right, so theres no way for our browser to know that we using utc or local time and because of this its gonna presume its local time.
-Utc time has a z at the end. To solve this we must concatenate a 'Z' to the sttring interpolation when we use pipe timeAgo on the property in the member detail and edit html
166.Restoring the caching for members. We want to add back our caching and getting our service to remember once again that we have data in the memory and remember the data in the memory and we disabled it while we were looking at pagination and filtering, but we need to enable it again
-We need to store the query as a key and the result as a value since we're making use of Pagination and filtering and sorting and so forth.
-Now try and get a key from the userParams.
-Now we want to store the key and value pairs and we'll use a Javascript Object Map in the members service.ts file
-167.Restoring caching for member detailed.
-168. Remembering the filters for a user in the service.
-The reason why we add this is because, If we take a look at our members list and go into a single member, that means the member list gets destroyed and that is where we store our
userParams, which means we lost our previous query we had
-So what we want is, If we click on one of the users and go back to the matches we would like to remember the previous query that I had and in order to do this we need to store the UeParams in the memberService, because if the component gets destroyed the service does not get destroyed. Look atv the code in the membersService.ts file in the constructor.
-Then we want to create methods for getUserParams() and setUserParams()
-Then we can use the getUserParams method inside our component which is the memberList.component.ts file
-Inside the member-list component.ts remove where we setting our userParams in the constructor and also remove the injected UserParams, because our memberService is already taking care of this
-So inside the member-list.component.ts file, call the userParams data inside the memberlist component to fetch the getUserParams method from the membersService file and then the userParams in the memberlist.component.ts file will be populated.
-Then if we load the members in the memberList.component file we want to set the setUserParams method in the memberService file with the userParams in the loadMembers method inside the memberslist component.

SECTION 14. ADDING THE LIKE USER FEATURE
-171. Adding a likes entity. This is a many to many relationship between the user signed in and the user displaying in the matches tab. eg. many to many between AppUser and AppUser and we will be using a fluentAPI, meaning a many to many relationship with the same entity
-AppUser "has one" SourceUser "with many" likedUsers
-AppUser "has one" LikedUser "with many" likedByUsers
-Containing a List of a user that has liked or is liked by other users
-Adding the 2 properties to the AppUser which will be changed to "UserLike" with regards to many to many relationship.
-Creating a new entity to store our likes, called "UserLike" which will be the joining table between the AppUser and the AppUser
-Go to DataContext file and add the DbSet UserLike to the file. Also override the OnModelCreating method from the DbContext that we extending and follow the code inside the DataContext with regards to the modelBuilder.
-Once this modelBuilder for both Many to Many is done, now we can create a new Migration and Update the database
-172.Adding an Interface likes repository. and Also a LikeDto since we dont want to return the AppUser, but only the neccessary properties
-Once done add a Likes Repository and we gonna derive from ILikesRepository, make sure to add Interface and repo to ApplicationServiceExtensions
173.Implementing the likes repository. Please follow all the code in the likesRepository that handles many to many relationship with joining table likedUsers
-174.Controller methods for the likes feature. Look at all the code implemented for the likesController.
-175. Setting up the likes functions in the Angular App. Go to the membersService and add thr addLike method in the service

SECTION 15. ADDING THE MESSAGING FEATURE
-181. Setting up the entities for messaging.
-We gonna have to implement many to many relationship, since a user can send many messages and a user can receive many messages
-182. Setting up the Message Repository.
-Include everything that is needed for the Interface and the repository
-183. Setting up the AutoMapper profiles.
-Create a new MessageDto. Follow the code in there and then create a map from Message.cs to MessageDto.cs
-Once that is done, we alos want to receive thhe message from the client and for that we gonna create another dto. Call it CreateMessageDto and follow the code inside. We dont need an automapper profile to go from the CreateMessageDto to the Message, because we literally got 2 properties 
-184. Adding a message Controller. This is to create a controller to send a message to another user from the user thats currently logged in.
-185. Getting the messages from the Repo.
-We gonna focus on getMessagesForUser method in the messageRepository.
-We gonna treat this like an unread message, inbox and outbox and we gonna use one of these 3 as a parametter to see which container of messages the user wants to view. so we gonna give them the option of those 3 to choose from or to view.
-In order to do that we have to create pagination parameters and make sure we return it as a pagedList and what we'll also take in, is which container their interested in viewing
-Go to helpers folder in the API. create a new c# class called MessageParams and add the code in there. And since we added the MessageParams in there add it ass a parameter in the getMessagesForUser method in the repo.
-Now write the code to fetch the messages from the different containers in the getMessagesForUser methodin the MessageRepository.
-Now in the MessagesController create a new HttpGet method and dd the code
-Go to postman and remeber to make use of QueryStrings because we use FromQuery in the controller as a part of our paramater else the api call in postman wouldnt work
-186.Getting the message thread for 2 users.
-The main goal is to get the message thread between users. In the Messages Tab we gonna have the unread, inbox and outbox messages
-Now we going to create te repository and then the controller, creating a new endpoint. Test it on postman.
-187. Setting up the Angular app for messaging. We returning a messageDto for the thread so copy the one of the MessageDto objects from postman and then go to json2ts site and paste it in there so it can be converted.
-Create a new class in typescript called message.ts. It will contain the messageDto's properties that we returning in the backend for the controller of thread
-Now we will create a new services for our messages, but we will need the getPaginatedResult and the getPaginationHeaders from the memberService that we used in there. Since we need to make use of those 2 private methods in the messageService as well, well have to cut those 2 methods out of the membersService file and put them into a helper file that can be accessible from any service class.
-Inisde the Services folder, create a new file called paginationHelper.ts that will contain both those 2 private methods. Change those 2 methods to "export function" so we have access to them in our service. and make sure to change the member service and the Message Service accordingly to those exported function from the paginationHelper class
-Go to the message Component and start doing the code and test in on the frontend
-188.Designing the inbox.This will be happening in the navbar at the top under "messages tab". Added coding in the messages.component.html and messages.component.ts and messages.component.css
-192.Adding the message thread in the client. Here we going to get the message thread between 2 users.
-Create a services call in message.service.ts to get the thread - getMessageThread() function in services class.
-Create a new component inide the members folder: "member-messages"
-This member-messages component is gonna be a child of the member-detail component so we can pass the username from the parent down to the child
-




